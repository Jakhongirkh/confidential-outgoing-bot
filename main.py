import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import os
import json
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
DEST_GROUP_ID = int(os.getenv("DEST_GROUP_ID"))
AUTHORIZED_USERS = json.loads(os.getenv("AUTHORIZED_USERS", "[]"))

SUBSCRIBERS = {
    "–≠—à–∞–Ω–∫—É–ª–æ–≤ –•. –ú.": "01",
    "–ù–∞—Å—Ä–µ—Ç–¥–∏–Ω–æ–≤ –ë.": "01-01",
    "–¢–∞—Ö–∏—Ä–æ–≤ –ò.": "01-03",
    "–ú–∞–º–∞–∂–æ–Ω–æ–≤ –•.": "01-04",
    "–ú–∏—Ä—Å–∞–∏–¥–æ–≤ –ê.": "01-05",
    "–£–±–∞–π–¥—É–ª–ª–∞–µ–≤ –ê.": "01-06",
    "–õ—é–±—É—à–∫–∏–Ω–∞ –ú.": "01-07"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ß—Ç–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞
def get_and_increment_counter():
    if not os.path.exists("counter.txt"):
        with open("counter.txt", "w") as f:
            f.write("0")
    with open("counter.txt", "r+") as f:
        value = int(f.read())
        f.seek(0)
        f.write(str(value + 1))
        f.truncate()
    return value + 1

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in AUTHORIZED_USERS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    keyboard = [[InlineKeyboardButton("üìÑ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –ø–∏—Å—å–º–∞", callback_data="get_number")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "get_number":
        keyboard = [[InlineKeyboardButton(name, callback_data=f"signer_{code}")] for name, code in SUBSCRIBERS.items()]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞ –ø–∏—Å—å–º–∞:", reply_markup=reply_markup)
    
    elif query.data.startswith("signer_"):
        code = query.data.split("_")[1]
        user_states[query.from_user.id] = code
        await query.edit_message_text(f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω—Ç –≤—ã–±—Ä–∞–Ω: {code}\nüì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–∏—Å—å–º–∞.")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id not in AUTHORIZED_USERS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    if user_id not in user_states:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.")
        return

    signer_code = user_states.pop(user_id)
    count = get_and_increment_counter()
    number = f"{signer_code}/{count}"
    date_str = datetime.now().strftime("%d.%m.%Y")

    caption = f"üì§ –ò—Å—Ö–æ–¥—è—â–µ–µ –ø–∏—Å—å–º–æ
–ù–æ–º–µ—Ä: {number}
–î–∞—Ç–∞: {date_str}
–û—Ç–ø—Ä–∞–≤–∏–ª: @{update.effective_user.username or update.effective_user.id}"
    
    photo = update.message.photo[-1]
    file_id = photo.file_id
    await context.bot.send_photo(chat_id=DEST_GROUP_ID, photo=file_id, caption=caption)
    await update.message.reply_text(f"‚úÖ –ù–æ–º–µ—Ä –ø–∏—Å—å–º–∞: {number}
–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.run_polling()

if __name__ == "__main__":
    main()
