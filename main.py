import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import os
import json
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN") or "7242725938:AAF4kjuq-pW1yKRQ65H94xa2uAoT067dfcE"
DEST_GROUP_ID = int(os.getenv("DEST_GROUP_ID") or "-4603122462")
AUTHORIZED_USERS = json.loads(os.getenv("AUTHORIZED_USERS") or "[931156301, 5169701031, 5169167062, 2775849, 5615990266, 161924982, 152949529, 935674959, 350719645, 2600967, 7103781295, 85520359]")

SUBSCRIBERS = {
    "–≠—à–∞–Ω–∫—É–ª–æ–≤ –•. –ú.": "01",
    "–ù–∞—Å—Ä–µ—Ç–¥–∏–Ω–æ–≤ –ë.": "01-01",
    "–¢–∞—Ö–∏—Ä–æ–≤ –ò.": "01-03",
    "–ú–∞–º–∞–∂–æ–Ω–æ–≤ –•.": "01-04",
    "–ú–∏—Ä—Å–∞–∏–¥–æ–≤ –ê.": "01-05",
    "–£–±–∞–π–¥—É–ª–ª–∞–µ–≤ –ê.": "01-06",
    "–õ—é–±—É—à–∫–∏–Ω–∞ –ú.": "01-07"
}

# –õ–æ–≥–≥–µ—Ä
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –§—É–Ω–∫—Ü–∏—è —Å—á—ë—Ç—á–∏–∫–∞
def get_and_increment_counter():
    if not os.path.exists("counter.txt"):
        with open("counter.txt", "w") as f:
            f.write("0")
    with open("counter.txt", "r+") as f:
        value = int(f.read())
        f.seek(0)
        f.write(str(value + 1))
        f.truncate()
    return value + 1

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_states = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id not in AUTHORIZED_USERS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        message = (
            f"üö´ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
            f"üë§ Username: @{user.username or '‚Äî'}\n"
            f"üÜî ID: {user.id}"
        )
        await context.bot.send_message(chat_id=DEST_GROUP_ID, text=message)
        return

    keyboard = [[InlineKeyboardButton("üìÑ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –ø–∏—Å—å–º–∞", callback_data="get_number")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "get_number":
        keyboard = [[InlineKeyboardButton(name, callback_data=f"signer_{code}")] for name, code in SUBSCRIBERS.items()]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞ –ø–∏—Å—å–º–∞:", reply_markup=reply_markup)

    elif query.data.startswith("signer_"):
        code = query.data.split("_")[1]
        count = get_and_increment_counter()
        full_number = f"{code}/{count}"
        user_states[query.from_user.id] = full_number  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å –Ω–æ–º–µ—Ä

        await query.edit_message_text(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω—Ç –≤—ã–±—Ä–∞–Ω: {full_number}\nüì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–∏—Å—å–º–∞."
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id not in AUTHORIZED_USERS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    if user_id not in user_states:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.")
        return

    full_number = user_states.pop(user_id)
    date_str = datetime.now().strftime("%d.%m.%Y")

    caption = (
        f"üì§ –ò—Å—Ö–æ–¥—è—â–µ–µ –ø–∏—Å—å–º–æ\n"
        f"–ù–æ–º–µ—Ä: {full_number}\n"
        f"–î–∞—Ç–∞: {date_str}\n"
        f"–û—Ç–ø—Ä–∞–≤–∏–ª: @{update.effective_user.username or update.effective_user.id}"
    )

    photo = update.message.photo[-1]
    await context.bot.send_photo(chat_id=DEST_GROUP_ID, photo=photo.file_id, caption=caption)

    await update.message.reply_text(
        f"‚úÖ –ù–æ–º–µ—Ä –ø–∏—Å—å–º–∞: {full_number}\n–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."
    )

# –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.run_polling()

if __name__ == "__main__":
    main()
